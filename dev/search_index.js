var documenterSearchIndex = {"docs":
[{"location":"uff/#UFF-Ultrasound-File-Format","page":"Ultrasound File Format","title":"UFF - Ultrasound File Format","text":"","category":"section"},{"location":"uff/#Points","page":"Ultrasound File Format","title":"Points","text":"","category":"section"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"USTB.UFF.Point\nUSTB.UFF.PointFromCartesian\nUSTB.UFF.CartesianFromPoint","category":"page"},{"location":"uff/#USTB.UFF.Point","page":"Ultrasound File Format","title":"USTB.UFF.Point","text":"Point(r, θ, ϕ)\n\nPoint contains the position of a point in a tridimensional space. It express that location in spherical coordinates which allows to place  points at infinity but in a given direction.\n\nThe Julia implementation of the UFF Point type is a derivation of the CoordinateTransformations.jl Spherical type. The UFF Point defines the azimuth θ as the angle from the point location to the YZ plane. The elevation ϕ is the angle from the point location to the XZ plane.\n\n\n\n\n\n","category":"type"},{"location":"uff/#USTB.UFF.PointFromCartesian","page":"Ultrasound File Format","title":"USTB.UFF.PointFromCartesian","text":"(::PointFromCartesian)(x::AbstractVector)\n\nTransformation functor to map 3D Cartesian coordinates into UFFs Point type. The conversion for x y z is given by\n\nbeginaligned\n    r       = sqrtx^2+y^2+z^2  \n    theta = textatan(x z)           \n    phi   = textasin(y r)\nendaligned\n\n\n\n\n\n","category":"type"},{"location":"uff/#USTB.UFF.CartesianFromPoint","page":"Ultrasound File Format","title":"USTB.UFF.CartesianFromPoint","text":"(::CartesianFromPoint)(x::Point)\n\nTransformation functor to map UFF Point into Cartesian coordinates. The conversion for r theta phi is given by\n\nbeginaligned\n    x = rcdotsin(theta)cdotcos(phi) \n    y = rcdotsin(phi)                     \n    z = rcdotcos(theta)cdotcos(phi) \nendaligned\n\n\n\n\n\n","category":"type"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"","category":"page"},{"location":"uff/#Probe","page":"Ultrasound File Format","title":"Probe","text":"","category":"section"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"USTB.UFF.Probe\nBase.length(p::USTB.UFF.Probe)","category":"page"},{"location":"uff/#USTB.UFF.Probe","page":"Ultrasound File Format","title":"USTB.UFF.Probe","text":"Probe\n\nProbe contains the position and attitude of all elements of a probe.  Optionally PROBE can hold each element width and height, assuming the elements were rectangular. Information is stored in a  single matrix form called geometry, one row per element containing: [x y z azimuth elevation width height]\n\n\n\n\n\n","category":"type"},{"location":"uff/#Base.length-Tuple{USTB.UFF.Probe}","page":"Ultrasound File Format","title":"Base.length","text":"Return the number of elements in the Probe\n\n\n\n\n\n","category":"method"},{"location":"uff/#Interfaces","page":"Ultrasound File Format","title":"Interfaces","text":"","category":"section"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"Probe implements the Instance Properties interface from Base allowing to access specific properties of Probe easily, through the . operator.","category":"page"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"Base.propertynames(::USTB.UFF.Probe, private::Bool=false)\nBase.getproperty(p::USTB.UFF.Probe, s::Symbol)\nBase.setproperty!(p::USTB.UFF.Probe, s::Symbol, value) ","category":"page"},{"location":"uff/#Base.propertynames","page":"Ultrasound File Format","title":"Base.propertynames","text":"Implement the property interface for the same variables used by MATLAB\n\n\n\n\n\n","category":"function"},{"location":"uff/#Base.getproperty-Tuple{USTB.UFF.Probe, Symbol}","page":"Ultrasound File Format","title":"Base.getproperty","text":"Base.getproperty(p::Probe, s::Symbol)\n\nAllow indexing by property, similar to MATLABs dependent get methods, getproperty is extended to allow getting the geometries columns by symbols for lookups. Available symbols and [aliases] for lookup are given by\n\n:x                    = p.geometry[:, 1]  # center of the element in the x axis[m]\n:y                    = p.geometry[:, 2]  # center of the element in the y axis[m]\n:z                    = p.geometry[:, 3]  # center of the element in the z axis[m]\n:θ [:az, :azimuth]    = p.geometry[:, 4]  # orientation of the element in the azimuth direction [rad]\n:ϕ [:alt, :elevation] = p.geometry[:, 5]  # orientation of the element in the elevation direction [rad]\n:w [:width]           = p.geometry[:, 6]  # element width [m]\n:h [:height]          = p.geometry[:, 7]  # element height [m]\n:r [:distance]        = norm(p.geometry[:,1:3], dims=2) # Distance from elements to origin [m] \n\n\n\n\n\n","category":"method"},{"location":"uff/#Base.setproperty!-Tuple{USTB.UFF.Probe, Symbol, Any}","page":"Ultrasound File Format","title":"Base.setproperty!","text":"Set property function\n\n\n\n\n\n","category":"method"},{"location":"uff/#Property-Interface-Example","page":"Ultrasound File Format","title":"Property Interface Example","text":"","category":"section"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"using USTB.UFF # hide\na = Probe(Point([2,0,4]), rand(3,7));\na[:,1:3] = [1 2 3; 4 5 6; 7 8 9];\na.x\na.y = [10, 11, 12];\na.geometry","category":"page"},{"location":"uff/#Method-delegations","page":"Ultrasound File Format","title":"Method delegations","text":"","category":"section"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"Probe also forwards Base.size and Base.getindex to Probe.geometry, meaning size(p::Probe) and getindex(p::Probe,...) work as they do for matrices, but operate on Probe.geometry.","category":"page"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"Base.size(p::USTB.UFF.Probe, args...; kwargs...)\nBase.getindex(p::USTB.UFF.Probe, args...; kwargs...) \nBase.setindex!(p::USTB.UFF.Probe, args...; kwargs...) ","category":"page"},{"location":"uff/#Base.size-Tuple{USTB.UFF.Probe, Vararg{Any}}","page":"Ultrasound File Format","title":"Base.size","text":"Forwarded Base.size to Probe.geometry\n\n\n\n\n\n","category":"method"},{"location":"uff/#Base.getindex-Tuple{USTB.UFF.Probe, Vararg{Any}}","page":"Ultrasound File Format","title":"Base.getindex","text":"Forwarded Base.getindex to Probe.geometry\n\n\n\n\n\n","category":"method"},{"location":"uff/#Base.setindex!-Tuple{USTB.UFF.Probe, Vararg{Any}}","page":"Ultrasound File Format","title":"Base.setindex!","text":"Forwarded Base.setindex! to Probe.geometry\n\n\n\n\n\n","category":"method"},{"location":"uff/#Linear-Array","page":"Ultrasound File Format","title":"Linear Array","text":"","category":"section"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"","category":"page"},{"location":"uff/#Curvilinear-Array","page":"Ultrasound File Format","title":"Curvilinear Array","text":"","category":"section"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"USTB.UFF.CurvilinearArray","category":"page"},{"location":"uff/#USTB.UFF.CurvilinearArray","page":"Ultrasound File Format","title":"USTB.UFF.CurvilinearArray","text":"mutable struct CurvilinearArray <: USTB.UFF.AbstractProbeArray\n\nComposite type to define a curvilinear array probe geometry CurvilinearArray defines an array of regularly space elements on an  arc in the azimuth dimensions.  Optionally it can hold each element  width and height, assuming the elements are rectangular. \n\nFields\n\nprobe::USTB.UFF.Probe: Wrapped probe\nN::Integer: Number of elements in array\npitch::Float64: Distance between the elements in the azimuth direction [m]\nradius::Float64: Radius of the curvilinear array [m]\nelement_width::Float64: Width of the elements in the azimuth direction [m]\nelement_height::Float64: Height of the elements in the elecation direction [m]\n\nExample\n\nprb = CurvilinearArray()\nprb.N = 128;\nprb.pitch = 500e-6;\nprb.radius = 70e-3;\n\nTODO: Link up Probe\n\n\n\n\n\n","category":"type"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"","category":"page"},{"location":"uff/#Wavefronts","page":"Ultrasound File Format","title":"Wavefronts","text":"","category":"section"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"USTB.UFF.Wavefront\nUSTB.UFF.Wavefront.Plane\nUSTB.UFF.Wavefront.Spherical\nUSTB.UFF.Wavefront.Photoacustic","category":"page"},{"location":"uff/#USTB.UFF.Wavefront","page":"Ultrasound File Format","title":"USTB.UFF.Wavefront","text":"Wavefront\n\nEnumeration for wave types.  Exported through USTB.UFF submodule. Available options are \n\nWavefront Type Value\nPlane 0\nSpherical 1\nPhotoacustic 1\n\nSee also WAVE\n\nTODO: Cross link WAVE\n\n\n\n\n\n","category":"module"},{"location":"uff/#USTB.UFF.Wavefront.Plane","page":"Ultrasound File Format","title":"USTB.UFF.Wavefront.Plane","text":"Wavefront instance describing a plane wave\n\n\n\n\n\n","category":"constant"},{"location":"uff/#USTB.UFF.Wavefront.Spherical","page":"Ultrasound File Format","title":"USTB.UFF.Wavefront.Spherical","text":"Wavefront instance describing a spherical wave\n\n\n\n\n\n","category":"constant"},{"location":"uff/#USTB.UFF.Wavefront.Photoacustic","page":"Ultrasound File Format","title":"USTB.UFF.Wavefront.Photoacustic","text":"Wavefront instance describing a photoacustic wave\n\n\n\n\n\n","category":"constant"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"","category":"page"},{"location":"uff/#Windows","page":"Ultrasound File Format","title":"Windows","text":"","category":"section"},{"location":"uff/","page":"Ultrasound File Format","title":"Ultrasound File Format","text":"USTB.UFF.Window","category":"page"},{"location":"uff/#USTB.UFF.Window","page":"Ultrasound File Format","title":"USTB.UFF.Window","text":"Window\n\nEnumeration for window types.  Available options and corresponding values are \n\nWindow Type Value\nNone 0\nBoxcar 1\nFlat 1\nRectangular 1\nHanning 2\nHamming 3\nTukey25 4\nTukey50 5\nTukey75 6\nTukey80 7\nSta 7\nScanline 8\n\nSee also PULSE, BEAM, PHANTOM, PROBE\n\nTODO: Link up PULSE\n\nTODO: Link up BEAM\n\nTODO: Link up PHANTOM\n\nTODO: Link up PROBE\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = USTB","category":"page"},{"location":"#USTB","page":"Home","title":"USTB","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for USTB.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [USTB]","category":"page"}]
}
